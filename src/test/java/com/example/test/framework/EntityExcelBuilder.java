package com.example.test.framework;

import java.io.FileInputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.example.mock.pojo.TenantConfig;

public class EntityExcelBuilder {
	
    private long custId =1;
	private ConfigReader reader;
	private ExcelWriter writer;
	public EntityExcelBuilder(TenantConfig config,ExcelWriter writer){
		reader = new ConfigReader(config);
		this.writer =writer;
		writer.createWorkbook();
		
	}
	
	public void buildDataForMissingMandatoryFields(String entityName,boolean pk){
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		XSSFSheet sheet = writer.addSheet(entityName);
		
		
		
		for(DynamicField fld : getAllMandatoryFields(entityName)){
			int lastRow = sheet.getLastRowNum()+1;
			Row row = sheet.createRow(lastRow);
			for (int cellNo =0; cellNo < fields.size(); cellNo++){
				Cell cell = row.createCell(cellNo);
				String type = fields.get(cellNo).getType();
				boolean valueset = false;
				if(fld.getFieldname().equals(fields.get(cellNo).getFieldname())){
					
					valueset =setCellValue(cell,type,CellValue.BLANK);
					if(!valueset){
						continue;
					}
				}else if(fields.get(cellNo).getRequired()){
					valueset =setCellValue(cell,type,CellValue.NON_BLANK);
				}else{
					valueset =setCellValue(cell,type,CellValue.BLANK);
				}
				if(fields.get(cellNo).getAutogenerated()){
					valueset = setCellValue(cell,type,CellValue.AUTO);
				}
							
				if(!valueset){
					buildOnlyRequiredField(fields.get(cellNo).getType(),true);
				}
				
			}
			addExpectedMessage(entityName,custId,"error message");
			if(pk){
				row.createCell(row.getLastCellNum()).setCellValue(custId);
			}
			custId++;
			
		}
		
		
		
	}
	
	public List<DynamicField> getAllMandatoryFields(String entityName){
		
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		return fields.stream().filter( f -> f.getRequired().equals(new Boolean(true))).collect(Collectors.toList());
	}
	
	public void buildOnlyRequiredField(String entityName,boolean pk){
		
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		XSSFSheet sheet = writer.addSheet(entityName);
		int lastRow = sheet.getLastRowNum()+1;
		Row row = sheet.createRow(lastRow);
	
		for (int cellNo =0; cellNo < fields.size(); cellNo++){
			Cell cell = row.createCell(cellNo);
			
			String type = fields.get(cellNo).getType();
			boolean valueset = false;
			if(fields.get(cellNo).getRequired()){
				valueset = setCellValue(cell,type,CellValue.NON_BLANK);
			}else{
				valueset = setCellValue(cell,type,CellValue.BLANK);
			}
			if(fields.get(cellNo).getAutogenerated()){
				valueset = setCellValue(cell,type,CellValue.AUTO);
			}
						
			if(!valueset){
			   buildOnlyRequiredField(fields.get(cellNo).getType(),true);
			}	
	    }
		if(!pk){
			addExpectedMessage(entityName,custId,"success message");
		}
		if(pk){
		row.createCell(row.getLastCellNum()).setCellValue(custId);
		}
		custId++;
		
	}
	
	private enum CellValue {
		
		AUTO,BLANK,NON_BLANK,NON_BLANK_LENGTH
	}
	
	public boolean setCellValue(Cell cell,String type,CellValue cellvalue){

		switch(type){
		case "string":
			if(cellvalue == CellValue.NON_BLANK){
			   cell.setCellValue("testing");
			}
            if(cellvalue == CellValue.BLANK){
				cell.setCellValue("");	
			}
			return true;
		case "number":
			if(cellvalue == CellValue.NON_BLANK){
				cell.setCellValue(1234);
			}
	        if(cellvalue == CellValue.BLANK){
			    cell.setCellValue("");	
			}
	        if(cellvalue == CellValue.AUTO){
			    cell.setCellValue(custId);	
			}
			return true;
		default:
			return false;			
		}
	}
	
	
	public Map<Integer,String> getOutputMessages(String file,String entityName){
		Map<Integer,String> expected = new HashMap<Integer,String>();
		try{
		FileInputStream fs = new FileInputStream(file);
	    XSSFWorkbook wb = new XSSFWorkbook(fs);
	    XSSFSheet sheet = wb.getSheet(entityName);
	    
	    for(int i =1; i <= sheet.getLastRowNum();i++){
	    	
	    	Row row = sheet.getRow(i);
	    	expected.put((int)row.getCell(0).getNumericCellValue(), row.getCell(row.getLastCellNum()-1).getStringCellValue());
	    }
	   	    
		}catch(Exception e){
			//TODO log Exception
			e.printStackTrace();
		}
		return expected;
	}
	
	
	public void addExpectedMessage(String entityName,long primaryKey, String errorMessage){
		XSSFSheet sheet = writer.getSheet(entityName);
		Row row = sheet.getRow(sheet.getLastRowNum());
		row.createCell(row.getLastCellNum()+1).setCellValue(errorMessage);
	}

	public void write(){
		writer.write();
	}
	

}
