package com.example.test.framework;

import java.io.FileInputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.example.mock.pojo.TenantConfig;
import com.example.test.framework.DynamicField.Validation;

public class EntityExcelBuilder {
	
	private ConfigReader reader;
	private ExcelWriter writer;
	public EntityExcelBuilder(TenantConfig config,ExcelWriter writer){
		reader = new ConfigReader(config);
		this.writer =writer;
		writer.createWorkbook();
		
	}
	/**
	 * creates data for each field with mandatory value missing.
	 * @param entityName or sheet name
	 * @param pk - primary key needs to be passed ? true or false
	 */
	public void buildDataForMissingMandatoryFields(String entityName){
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		XSSFSheet sheet = writer.addSheet(entityName);
		
		
		for(DynamicField fld : getAllMandatoryFields(entityName)){
			int lastRow = sheet.getLastRowNum()+1;
			Row row = sheet.createRow(lastRow);
			for (int cellNo =0; cellNo < fields.size(); cellNo++){
				Cell cell = row.createCell(cellNo);
				boolean valueset = false;
				if(fld.getFieldname().equals(fields.get(cellNo).getFieldname())){
					valueset = isValueSet(cell, fields.get(cellNo),Scenario.HAVE_NO_VALUE);
				}else{
					valueset = isValueSet(cell, fields.get(cellNo),Scenario.HAVE_A_VALUE);
				}
				
				if(!valueset){
					   buildOnlyRequiredField(fields.get(cellNo).getType(),getAutoGeneratedField(fields));
				}

			}

			addExpectedMessage(entityName,"error message");

			
		}	
		
	}
	
	
	public void dataForValidation(String entityName){
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		XSSFSheet sheet = writer.addSheet(entityName);
		int lastRow = sheet.getLastRowNum()+1;
		Row row = sheet.createRow(lastRow);
		
		for(DynamicField df : getFieldsWithValidation(entityName)){
				  
			   for(Validation val :df.getValidations()){	  
					for (int cellNo =0; cellNo < fields.size(); cellNo++){
						Cell cell = row.createCell(cellNo);
											
						if(val == Validation.LENGTH && df.getFieldname().equals(fields.get(cellNo).getFieldname())){
							isValueSet(cell, fields.get(cellNo),Scenario.VALIDATION_LENGTH_NEG);							  
					     }else{
								if(!isValueSet(cell, fields.get(cellNo),Scenario.HAVE_A_VALUE)){
									 buildOnlyRequiredField(fields.get(cellNo).getType(),getAutoGeneratedField(fields));
								}
								
						 }
				    }	
					addExpectedMessage(entityName,"error message");
				}
		}
		
		
	}
	
	public List<DynamicField> getFieldsWithValidation(String entityName){   
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		return fields.stream().filter( f -> f.getValidations() != null && !f.getValidations().isEmpty()).collect(Collectors.toList());
	}
	
	
	public List<DynamicField> getAllMandatoryFields(String entityName){
		
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		return fields.stream().filter( f -> f.getRequired().equals(new Boolean(true))).collect(Collectors.toList());
	}
	
	
	
	/**
	 * create data with only mandatory fields.
	 * Creates a row in data xls
	 * @param entityName
	 * @param pk
	 */
	public void buildOnlyRequiredField(String entityName,DynamicField parentAutoGeneratedField){
		
		List<DynamicField> fields = reader.mapEntityToFields().get(entityName);
		
		if(parentAutoGeneratedField != null){
			parentAutoGeneratedField.setStopincrement(true);
			fields.add(0,parentAutoGeneratedField);
		}
		
		XSSFSheet sheet = writer.addSheet(entityName);
		int lastRow = sheet.getLastRowNum()+1;
		Row row = sheet.createRow(lastRow);
	
		for (int cellNo =0; cellNo < fields.size(); cellNo++){
			Cell cell = row.createCell(cellNo);
								
			if(!isValueSet(cell, fields.get(cellNo),Scenario.HAVE_A_VALUE)){
			   buildOnlyRequiredField(fields.get(cellNo).getType(),getAutoGeneratedField(fields));
			}	
	    }
		if(parentAutoGeneratedField == null)
		  addExpectedMessage(entityName,"success message");
		else
		  parentAutoGeneratedField.setStopincrement(false);

	}
	
	private DynamicField getAutoGeneratedField(List<DynamicField> fields){
		
	 if(fields != null)	
	 return fields.stream().filter(f -> f.getAutogenerated()).findFirst().orElse(null);
	 return null;		
	}
	
	private enum Scenario {
		
		HAVE_A_VALUE,HAVE_NO_VALUE,VALIDATION_LENGTH_NEG,VALIDATION_LENGTH_POS
	}
	
	private CellValue getValueType(DynamicField field,Scenario scenario){
		
		if(!field.isSet()){
			return CellValue.BLANK;
		}
		
		if(field.getAutogenerated()){
			return CellValue.AUTO;
		}else if(field.getRequired() && scenario == Scenario.HAVE_A_VALUE){
			
			if(scenario == Scenario.VALIDATION_LENGTH_NEG)
				return CellValue.VALIDATION_LENGTH_NEG;
			return CellValue.NON_BLANK;
		}else if(field.getRequired() && scenario == Scenario.HAVE_NO_VALUE){
			
			if(scenario == Scenario.VALIDATION_LENGTH_NEG)
				return CellValue.VALIDATION_LENGTH_NEG;
			return CellValue.BLANK;
		}
		else{
			if(scenario == Scenario.VALIDATION_LENGTH_NEG)
				return CellValue.VALIDATION_LENGTH_NEG;
			return CellValue.BLANK;
		}
		
	}
	
	
	private enum CellValue {
		
		AUTO,BLANK,NON_BLANK,VALIDATION_LENGTH_NEG,VALIDATION_LENGTH_POS
	}
	
	
	private String buildString(int len){
		StringBuffer sb = new StringBuffer();
		for(int i=0; i < len;i++){
			sb.append("a");
		}
		return sb.toString();
	}
	
	private final String STRING = "string";
	private final String NUMBER = "number";
	
	private boolean isValueSet(Cell cell,DynamicField field,Scenario scenario){
		CellValue value = getValueType(field, scenario);
		boolean isSet = false;
		
		 if(value == CellValue.VALIDATION_LENGTH_NEG){
			 isSet = true;
			 int len = field.getValidations().stream().filter(val -> val == Validation.LENGTH).findFirst().get().getLength();			 
			 cell.setCellValue(buildString(len-1));
		 }
		
		 if( value == CellValue.NON_BLANK){
			if(field.getType().equals(STRING)){
				cell.setCellValue("testing");
				isSet = true;
			}else if(field.getType().equals(NUMBER)){
				cell.setCellValue(1234);
				isSet = true;
			}
		 }else if(value == CellValue.BLANK){
			 isSet = true; 
			cell.setCellValue("");	
		 }else if(value == CellValue.AUTO){
			 isSet = true; 
			 cell.setCellValue(field.incrementAutoGeneratedValue());
			 
		 }
		
		 return isSet;
	}
	
	
	public Map<Integer,String> getOutputMessages(String file,String entityName){
		Map<Integer,String> expected = new HashMap<Integer,String>();
		try{
		FileInputStream fs = new FileInputStream(file);
	    XSSFWorkbook wb = new XSSFWorkbook(fs);
	    XSSFSheet sheet = wb.getSheet(entityName);
	    
	    for(int i =1; i <= sheet.getLastRowNum();i++){
	    	
	    	Row row = sheet.getRow(i);
	    	expected.put((int)row.getCell(0).getNumericCellValue(), row.getCell(row.getLastCellNum()-1).getStringCellValue());
	    }
	   	    
		}catch(Exception e){
			//TODO log Exception
			e.printStackTrace();
		}
		return expected;
	}
	
	
	public void addExpectedMessage(String entityName,String errorMessage){
		XSSFSheet sheet = writer.getSheet(entityName);
		Row row = sheet.getRow(sheet.getLastRowNum());
		row.createCell(row.getLastCellNum()+1).setCellValue(errorMessage);
	}

	public void write(){
		writer.write();
	}
	

}
